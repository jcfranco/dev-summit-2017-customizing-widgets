/// <amd-dependency path="esri/core/tsSupport/declareExtendsHelper" name="__extends" />
/// <amd-dependency path="esri/core/tsSupport/decorateHelper" name="__decorate" />

import { subclass, declared } from "esri/core/accessorSupport/decorators";

import {
  jsxFactory,
  renderable,
  accessibleHandler
} from "esri/widgets/support/widget";

import Compass = require("esri/widgets/Compass");

const CSS = {
  base: "vintage-compass",
  compass: "vintage-compass__compass",
  dialContainer: "vintage-compass__dial-container",
  dial: "vintage-compass__dial"
};

interface Axes {
  x?: number;
  y?: number;
  z?: number;
}

interface TransformStyle {
  transform: string;
}

@subclass("esri.widgets.VintageCompass")
class VintageCompass extends declared(Compass) {

  render() {
    const orientation = this.viewModel.orientation;

    return (
      <div bind={this}
        class={CSS.base}
        onclick={this._reset}
        onkeydown={this._reset}
        tabIndex={0}>
        <img class={CSS.compass} src="./app/images/compass.svg" />
        <div class={CSS.dialContainer} styles={this._toRotationTransform(orientation)}>
          <img class={CSS.dial} src="./app/images/compass-dial.svg" />
        </div>
      </div>
    );
  }

  @accessibleHandler()
  private _reset() {
    this.reset();
  }

  private _toRotationTransform(orientation: Axes): TransformStyle {
    return {
      transform: `rotateZ(${orientation.z}deg)`
    };
  }

}

export = VintageCompass;
